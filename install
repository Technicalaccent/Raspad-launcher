#!/usr/bin/env python3
import os, sys
import time
import pwd
import grp
import platform
import shutil

DEBIAN_NAMES = ["N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "squeeze", "wheezy", "jessie", "stretch", "buster", "bullseye", "bookworm"]

username = os.getlogin()
gid = pwd.getpwnam(username).pw_gid
group_name = grp.getgrgid(gid)[0]
struct = platform.architecture()[0]

user_home = os.popen(f'getent passwd {username} | cut -d: -f 6').readline().strip()

errors = []

avaiable_options = ['-h', '--help', '--no-dep']
install_path = os.getcwd()

usage = '''
Usage:
    sudo python3 install.py [option]

Options:
               --no-dep     Do not download dependencies
    -h         --help       Show this help text and exit
'''

print(f'''
###############################################################################
#                                                                             #
#                                RasPad Launcher                              #
#                                                                             #
###############################################################################
Informations:
Username: {username}
User Group: {group_name}
User Home Directory: {user_home}
System Architecture: {struct}
''')

DEPENDENCIES = [
    "qml-module-qt-labs-folderlistmodel",
    "qml-module-qtquick-layouts",
    "qml-module-qtquick-controls2",
    "qml-module-qtquick-window2",
    "qml-module-qtquick2",
    "qml-module-qtgraphicaleffects",
    "libqt5quickcontrols2-5",
    "libqt5quicktemplates2-5",
    "qml-module-qtquick-templates2",
    "qml-module-qtquick-dialogs",
    "qml-module-qtquick-controls",
]

def install():
    options = []
    if len(sys.argv) > 1:
        options = sys.argv[1:]
        for o in options:
            if o not in avaiable_options:
                print("Option {} is not found.".format(o))
                print(usage)
                quit()
    if "-h" in options or "--help" in options:
        print(usage)
        quit()
    print("RasPad Launcher installation starts")

    debian_version = get_debian_version()
    if debian_version < 10:
        print("RasPad Launcher is for Debian 10 or higher")
        sys.exit(1)
    elif debian_version > 11:
        print("RasPad Launcher has not been compatible for Debian 11 or higher, please contact service@sunfounder.com for more information, or visit https://github.com/raspad-tablet/raspad-launcher for source code.")
        sys.exit(1)
    else:
        debian_name = DEBIAN_NAMES[debian_version]
    bin_name = f"raspad-launcher-{debian_name}-{struct}"
    print(f"Using binary: {bin_name}")

    if "--no-dep" not in options:
        do(msg="Update apt",
            cmd='run_command("sudo apt update")')
        dep = " ".join(DEPENDENCIES)
        do(msg="Install dependencies",
            cmd=f'run_command("sudo apt install {dep} -y")')

    if os.path.isdir('/usr/local/qt5pi'):
        print("Uninstall Old Qt runtime")
        do(msg="Remove Qt Runtime",
            cmd='run_command("rm -rf /usr/local/qt5pi")')

    print("Install RasPad Launcher")
    do(msg="Copy raspad-faq.desktop",
        cmd='run_command("cp ./applications/raspad-faq.desktop /usr/share/applications/")')
    do(msg="Copy raspad-launcher.desktop",
        cmd='run_command("cp ./applications/raspad-launcher.desktop /usr/share/applications/")')
    do(msg="Copy icon",
        cmd='run_command("cp ./icons/raspad.png /usr/share/icons/")')
    do(msg="Copy raspad-launcher",
        cmd=f'run_command("cp ./bin/{bin_name} /usr/local/bin/raspad-launcher")')
    do(msg="Copy raspad-launcher-helper",
        cmd='run_command("cp ./bin/raspad-launcher-helper /usr/local/bin/")')
    do(msg="Add excute permission",
        cmd='run_command("chmod +x /usr/local/bin/raspad-launcher /usr/local/bin/raspad-launcher-helper")')
    if os.path.isdir(f"{user_home}/.config/lxpanel/LXDE-pi/panels/panel"):
        do(msg="backup panel setting",
            cmd=f'run_command("cp {user_home}/.config/lxpanel/LXDE-pi/panels/panel {user_home}/.config/lxpanel/LXDE-pi/panels/panel.bak")')
    else:
        do(msg="cp panel settings",
            cmd=f'run_command("sudo cp -r /etc/xdg/lxpanel {user_home}/.config/")')
        do(msg="change panel setting owner",
            cmd=f'run_command("sudo chown -R {username}:{group_name} {user_home}/.config/lxpanel")')
    do(msg="replace menu icon",
        cmd=f'run_command("cp ./panel {user_home}/.config/lxpanel/LXDE-pi/panels/panel")')
    do(msg="Reflash panel",
        cmd='run_command("export DISPLAY=:0.0 && lxpanelctl restart")')

    # print("Install Onboard Keyboard")
    # do(msg="install onboard",
    #     cmd='run_command("sudo apt install onboard at-spi2-core -y")')
    # do(msg="install onboard",
    #     cmd='run_command("sudo apt install onboard -y")')
    # sudo apt install onboard

    print("Install screen auto rotator")
    if os.path.isdir("raspad-auto-rotator"):
        do(msg="Remove old auto rotator",
            cmd='run_command("rm -rf raspad-auto-rotator")')
    do(msg="Clone package",
        cmd='run_command("git clone --depth=1 https://github.com/raspad-tablet/raspad-auto-rotator")')
    os.chdir("raspad-auto-rotator")
    do(msg="Install raspad-auto-rotator",
        cmd='run_command("python3 install.py --no-reboot")')
    os.chdir("..")

    if len(errors) == 0:
        print("Finished")
        select = input("Installation needs to reboot. Do you want to reboot right now? (y/N): ")
        if select.lower() == "y":
            print("Reboot!")
            time.sleep(1)
            run_command("reboot")
        else:
            print("Canceled")
    else:
        print("\n\nError happened in install process:")
        for error in errors:
            print(error)
        print("Try to fix it yourself, or contact service@sunfounder.com with this message")
        sys.exit(1)

def cleanup():
    os.chdir(install_path)
    if os.path.isdir("raspad-auto-rotator"):
        shutil.rmtree("raspad-auto-rotator")

def run_command(cmd=""):
    import subprocess
    p = subprocess.Popen(
        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    result = p.stdout.read().decode('utf-8')
    status = p.poll()
    return status, result

def colored(text, color):
    color = color.lower()
    colors = {
        "grey":   f"\033[1;30m{text}\033[0m",
        "red":    f"\033[1;31m{text}\033[0m",
        "green":  f"\033[1;32m{text}\033[0m",
        "yellow": f"\033[1;33m{text}\033[0m",
        "blue":   f"\033[1;34m{text}\033[0m",
        "purple": f"\033[1;35m{text}\033[0m",
        "cyan":   f"\033[1;36m{text}\033[0m",
        "white":  f"\033[1;37m{text}\033[0m",
    }
    return colors[color]

def do(msg="", cmd=""):
    print(f"[    ] {msg}...", end='', flush=True)
    status, result = eval(cmd)
    # print(status, result)
    if status == 0 or status == None or result == "":
        print(f'\r[ {colored("OK", "green")} ]')
        return True
    else:
        print(f'\r[{colored("Fail", "red")}]')
        errors.append(f"{msg} error:\n  Status: {status}\n  Error: {result}")
        return False

def check_sudo():
    if os.geteuid() != 0:
        sys.exit("You need root permissions to do this!")

def get_debian_version():
    with open("/etc/issue", "r") as f:
        issue = f.read()
        datas = issue.split(" ")
        return int(datas[2])

if __name__ == "__main__":
    check_sudo()
    try:
        install()
    except KeyboardInterrupt:
        print("Canceled.")
    finally:
        cleanup()

# if __name__ == "__main__":
#     test()
